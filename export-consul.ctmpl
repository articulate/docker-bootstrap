#!/bin/bash -e
{{scratch.Set "env" (env "APP_ENV") -}}
{{if scratch.Get "env" | contains "peer"}}{{and (scratch.Set "env" "stage") (scratch.Set "override" true)}}{{end -}}
{{if scratch.Get "env" | contains "dev"}}{{(scratch.Set "override" true)}}{{end -}}

## OLD DEPRECATED STYLE
#global envs
{{range ls (printf "global/%s/env_vars" (scratch.Get "env")) -}}
{{/* check to see if app is peer related and skip ENV VARS that are already set */ -}}
{{if not (and (scratch.Get "override") (env .)) -}}
export {{.Key | toUpper}}="{{.Value}}"
{{end -}}
{{end -}}

#app envs
{{range ls (printf "apps/%s/%s/env_vars" (env "APP_NAME") (scratch.Get "env")) -}}
{{/* check to see if app is peer related and skip ENV VARS that are already set */ -}}
{{if not (and (scratch.Get "override") (env .)) -}}
export {{.Key | toUpper}}="{{.Value}}"
{{end -}}
{{end -}}

## NEW STYLE
#global envs
{{range ls "global/env_vars" -}}
{{/* check to see if app is peer related and skip ENV VARS that are already set */ -}}
{{if not (and (scratch.Get "override") (env .)) -}}
export {{.Key | toUpper}}="{{.Value}}"
{{end -}}
{{end -}}

#products envs
{{range ls (printf "products/%s/env_vars" (env "APP_PRODUCT")) -}}
{{/* check to see if app is peer related and skip ENV VARS that are already set */ -}}
{{if not (and (scratch.Get "override") (env .)) -}}
export {{.Key | toUpper}}="{{.Value}}"
{{end -}}
{{end -}}

#app envs
{{range ls (printf "apps/%s/env_vars" (env "APP_NAME")) -}}
{{/* check to see if app is peer related and skip ENV VARS that are already set */ -}}
{{if not (and (scratch.Get "override") (env .)) -}}
export {{.Key | toUpper}}="{{.Value}}"
{{end -}}
{{end -}}
