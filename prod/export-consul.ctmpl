#!/usr/bin/env bash
set -e

function log_deprecated(){
    if [ "${LOG_CONSUL_DEPRECATION}" != "true" ]; then
        return
    fi
    path="${1}"
    env="${SERVICE_ENV}"
    product="${SERVICE_PRODUCT}"
    service="${SERVICE_NAME}"
    (>&2 echo "{\"level\":\"warn\",\"path\":\"${path}\",\"env\":\"${env}\",\"product\":\"${product}\",\"service\":\"${service}\",\"msg\":\"loaded deprecated value\"}")
}

# DEPRECATED: global envs
{{range ls (printf "global/%s/env_vars" (env "SERVICE_ENV")) -}}
{{if not (env (.Key | toUpper)) -}}
export {{.Key | toUpper}}="{{.Value}}"
log_deprecated "global/${SERVICE_ENV}/env_vars/{{.Key}}"
{{end -}}
{{end -}}

# global envs
{{range ls "global/env_vars" -}}
{{if not (env (.Key | toUpper)) -}}
export {{.Key | toUpper}}="{{.Value}}"
{{end -}}
{{end -}}

# DEPRECATED: products envs
{{if (env "SERVICE_PRODUCT") -}}
{{range ls (printf "products/%s/env_vars" (env "SERVICE_PRODUCT")) -}}
{{if not (env (.Key | toUpper)) -}}
export {{.Key | toUpper}}="{{.Value}}"
log_deprecated "products/${SERVICE_PRODUCT}/env_vars/{{.Key}}"
{{end -}}
{{end -}}
{{end -}}

# DEPRECATED: app envs
{{range ls (printf "apps/%s/%s/env_vars" (env "SERVICE_NAME") (env "SERVICE_ENV")) -}}
{{if not (env (.Key | toUpper)) -}}
export {{.Key | toUpper}}="{{.Value}}"
log_deprecated "apps/${SERVICE_NAME}/${SERVICE_ENV}/env_vars/{{.Key}}"
{{end -}}
{{end -}}

# service envs
{{range ls (printf "services/%s/env_vars" (env "SERVICE_NAME")) -}}
{{if not (env (.Key | toUpper)) -}}
export {{.Key | toUpper}}="{{.Value}}"
{{end -}}
{{end -}}
