#!/bin/bash -e
{{scratch.Set "env" (env "APP_ENV") -}}
{{if scratch.Get "env" | contains "peer"}}{{and (scratch.Set "env" "stage") (scratch.Set "peer" true)}}{{end -}}

#global secrets
{{range secrets (printf "secret/global/%s/env_vars" (scratch.Get "env")) -}}
{{if and (scratch.Get "peer") (not (env .)) -}}
export {{ . | toUpper}}{{with secret (printf "secret/global/%s/env_vars/%s" (scratch.Get "env") .) }}{{range $k, $v := .Data}}="{{$v}}"{{end}}{{end}}
{{end -}}
{{if not (scratch.Get "peer") -}}
export {{ . | toUpper}}{{with secret (printf "secret/global/%s/env_vars/%s" (scratch.Get "env") .) }}{{range $k, $v := .Data}}="{{$v}}"{{end}}{{end}}
{{end -}}
{{end -}}

#app secrets
{{range secrets (printf "secret/apps/%s/%s/env_vars" (env "APP_NAME") (scratch.Get "env")) -}}
{{if and (scratch.Get "peer") (not (env .)) -}}
export {{ . | toUpper}}{{with secret (printf "secret/apps/%s/%s/env_vars/%s" (env "APP_NAME") (scratch.Get "env") .) }}{{range $k, $v := .Data}}="{{$v}}"{{end}}{{end}}
{{end -}}
{{if not (scratch.Get "peer") -}}
export {{ . | toUpper}}{{with secret (printf "secret/apps/%s/%s/env_vars/%s" (env "APP_NAME") (scratch.Get "env") .) }}{{range $k, $v := .Data}}="{{$v}}"{{end}}{{end}}
{{end -}}
{{end -}}
