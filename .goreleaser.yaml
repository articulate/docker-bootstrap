version: 2
before:
  hooks:
    - go mod tidy
    - go generate ./...
builds:
  - id: bootstrap-amd64
    goos:
      - linux
    goarch:
      - amd64
    ldflags:
      - "-s -w -extldflags '-Wl,-rpath,$ORIGIN'"
    env:
      - CGO_ENABLED=1
      - CC=gcc
      - CXX=g++
  - id: bootstrap-arm64
    goos:
      - linux
    goarch:
      - arm64
    ldflags:
      - "-s -w -extldflags '-Wl,-rpath,$ORIGIN'"
    env:
      - CGO_ENABLED=1
      - CC=aarch64-linux-gnu-gcc
      - CXX=aarch64-linux-gnu-g++
      - CGO_LDFLAGS="-L/usr/aarch64-linux-gnu/lib -Wl,--sysroot=/usr/aarch64-linux-gnu"
      - CGO_CFLAGS="--sysroot=/usr/aarch64-linux-gnu"
  - id: bootstrap-musl-amd64
    goos:
      - linux
    goarch:
      - amd64
    ldflags:
      - "-s -w -extldflags '-Wl,-rpath,$ORIGIN'"
    env:
      - CGO_ENABLED=1
      - CC=x86_64-linux-musl-gcc
      - CXX=x86_64-linux-musl-g++
      - CGO_LDFLAGS=-static-libgcc
  # I'm having a hard time finding a cross-compiler that works for arm-based musl builds. In theory this would work if building in an arm environment
  # - id: bootstrap-musl-arm64
  #   goos:
  #     - linux
  #   goarch:
  #     - arm64
  #   ldflags:
  #     - "-s -w -extldflags '-Wl,-rpath,$ORIGIN'"
  #   env:
  #     - CGO_ENABLED=1
  #     - CC=aarch64-linux-musl-gcc
  #     - CXX=aarch64-linux-musl-g++
  #     - CGO_LDFLAGS=-static-libgcc
archives:
  - name_template: '{{ .ProjectName }}_{{ .Os }}_{{ .Arch }}'
    format: binary
checksum:
  name_template: 'checksums.txt'
snapshot:
  version_template: "{{ incpatch .Version }}-next"
release:
  use_existing_draft: true

# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=cnqoj
